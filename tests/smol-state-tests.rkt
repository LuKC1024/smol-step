#lang racket
(require "./utilities.rkt")
(test-expect/smol '((defvar v (mvec 1 2 3))
                    (defvar vv (mpair v v))
                    (vec-set! (right vv) 0 100)
                    (left vv)
                    ) "'#(100 2 3)")
(test-equivalent '((defvar v (mvec 1 2 3))
                   (defvar vv (mpair v v))
                   (vec-set! (right vv) 0 100)
                   (left vv)
                   ))
(test-expect/smol '((defvar x (mvec 3))
                    (defvar v (mvec 1 2 x))
                    (vec-set! x 0 4)
                    v
                    ) "'#(1 2 #(4))")
(test-equivalent '((defvar x (mvec 3))
                   (defvar v (mvec 1 2 x))
                   (vec-set! x 0 4)
                   v
                   ))
(test-expect/smol '((defvar x (mvec 3))
                    (defvar v (mvec 1 2 x))
                    (set! x 4)
                    v
                    ) "'#(1 2 #(3))")
(test-equivalent '((defvar x (mvec 3))
                   (defvar v (mvec 1 2 x))
                   (set! x 4)
                   v
                   ))
(test-expect/smol '((defvar x 3)
                    (defvar v (mvec 1 2 x))
                    (set! x 4)
                    v
                    ) "'#(1 2 3)")
(test-equivalent '((defvar x 3)
                   (defvar v (mvec 1 2 x))
                   (set! x 4)
                   v
                   ))
(test-expect/smol '((defvar x (mvec 1 0))
                    (defvar y x)
                    (vec-set! x 0 173)
                    y
                    ) "'#(173 0)")
(test-equivalent '((defvar x (mvec 1 0))
                   (defvar y x)
                   (vec-set! x 0 173)
                   y
                   ))
(test-expect/smol '((defvar x (mvec 1 0))
                    (deffun (f y)
                      (vec-set! y 0 173))
                    (f x)
                    x
                    ) "'#(173 0)")
(test-equivalent '((defvar x (mvec 1 0))
                   (deffun (f y)
                     (vec-set! y 0 173))
                   (f x)
                   x
                   ))
(test-expect/smol '((defvar v (mpair 2 3))
                    (set-left! v v)
                    (left (left v))
                    ) "an `mpair` that contains itself.")
(test-equivalent '((defvar v (mpair 2 3))
                   (set-left! v v)
                   (left (left v))
                   ))
(test-expect/smol '((defvar x 3)
                    (defvar v (mvec 1 2 x))
                    ) "@1 = #(1 2 3)")
(test-equivalent '((defvar x 3)
                   (defvar v (mvec 1 2 x))
                   ))
(test-expect/smol '((defvar mv (mvec 4 5))
                    (left mv)
                    ) "4")
(test-equivalent '((defvar mv (mvec 4 5))
                   (left mv)
                   ))
(test-expect/smol '((defvar m (mvec 1 2))
                    (vec-set! m 1 (mvec 3 4))
                    (vec-ref m 2)
                    ) "error")
(test-equivalent '((defvar m (mvec 1 2))
                   (vec-set! m 1 (mvec 3 4))
                   (vec-ref m 2)
                   ))
(test-expect/smol '((defvar x (mvec 1 0 2))
                    (vec-set! x 1 x)
                    (vec-len x)
                    ) "3")
(test-equivalent '((defvar x (mvec 1 0 2))
                   (vec-set! x 1 x)
                   (vec-len x)
                   ))
(test-expect/smol '((defvar x (mvec 2 3))
                    (vec-set! x 0 100)
                    x
                    ) "'#(100 3)")
(test-equivalent '((defvar x (mvec 2 3))
                   (vec-set! x 0 100)
                   x
                   ))
(test-expect/smol '((defvar x (mvec 2))
                    (vec-set! x 0 100)
                    x
                    ) "'#(100)")
(test-equivalent '((defvar x (mvec 2))
                   (vec-set! x 0 100)
                   x
                   ))
(test-expect/smol '((defvar mv (mvec 100))
                    (defvar mv2 (mpair mv mv))
                    (vec-set! (left mv2) 0 42)
                    (right mv2)
                    ) "'#(42)")
(test-equivalent '((defvar mv (mvec 100))
                   (defvar mv2 (mpair mv mv))
                   (vec-set! (left mv2) 0 42)
                   (right mv2)
                   ))
(test-expect/smol '((defvar var (mvec 0))
                    (defvar vec (mvec 2 var 3))
                    (vec-set! var 0 1)
                    vec
                    ) "'#(2 #(1) 3)")
(test-equivalent '((defvar var (mvec 0))
                   (defvar vec (mvec 2 var 3))
                   (vec-set! var 0 1)
                   vec
                   ))
(test-expect/smol '((defvar var (mvec 0))
                    (defvar vec (mvec 2 var 3))
                    (set! var 1)
                    vec
                    ) "'#(2 #(0) 3)")
(test-equivalent '((defvar var (mvec 0))
                   (defvar vec (mvec 2 var 3))
                   (set! var 1)
                   vec
                   ))
(test-expect/smol '((defvar var 0)
                    (defvar vec (mvec 2 var 3))
                    (set! var 1)
                    vec
                    ) "'#(2 0 3)")
(test-equivalent '((defvar var 0)
                   (defvar vec (mvec 2 var 3))
                   (set! var 1)
                   vec
                   ))
(test-expect/smol '((defvar var1 (mvec 100 200))
                    (defvar var2 var1)
                    (vec-set! var1 1 17)
                    var2
                    ) "'#(100 17)")
(test-equivalent '((defvar var1 (mvec 100 200))
                   (defvar var2 var1)
                   (vec-set! var1 1 17)
                   var2
                   ))
(test-expect/smol '((defvar var1 (mvec 100 17))
                    (deffun (update-var var2)
                      (vec-set! var2 0 200))
                    (update-var var1)
                    var1
                    ) "'#(200 17)")
(test-equivalent '((defvar var1 (mvec 100 17))
                   (deffun (update-var var2)
                     (vec-set! var2 0 200))
                   (update-var var1)
                   var1
                   ))
(test-expect/smol '((defvar x (mpair 0 12))
                    (set-right! x x)
                    (right (right x))
                    ) "0")
(test-equivalent '((defvar x (mpair 0 12))
                   (set-right! x x)
                   (right (right x))
                   ))
(test-expect/smol '((defvar mv (mvec 5 300))
                    (right mv)
                    ) "300")
(test-equivalent '((defvar mv (mvec 5 300))
                   (right mv)
                   ))
(test-expect/smol '((defvar x (mvec 4 5 6))
                    (vec-set! x 2 (mvec 10 9 8))
                    (vec-ref x 4)
                    ) "error")
(test-equivalent '((defvar x (mvec 4 5 6))
                   (vec-set! x 2 (mvec 10 9 8))
                   (vec-ref x 4)
                   ))
(test-expect/smol '((defvar x (mvec 4 2 5 6))
                    (vec-set! x 2 x)
                    (vec-len x)
                    ) "4")
(test-equivalent '((defvar x (mvec 4 2 5 6))
                   (vec-set! x 2 x)
                   (vec-len x)
                   ))
(test-expect/smol '((defvar v (mvec 23 4))
                    (vec-set! v 0 66)
                    v
                    ) "'#(66 4)")
(test-equivalent '((defvar v (mvec 23 4))
                   (vec-set! v 0 66)
                   v
                   ))
(test-expect/smol '((defvar v (mvec 23))
                    (vec-set! v 0 66)
                    v
                    ) "'#(66)")
(test-equivalent '((defvar v (mvec 23))
                   (vec-set! v 0 66)
                   v
                   ))