#lang racket
(require "./utilities.rkt")

(test-expect/smol '((deffun (make-counter count)
                      (deffun (counter)
                        (set! count (+ count 1))
                        count)
                      counter)
                    (defvar f (make-counter 0))
                    (defvar g (make-counter 0))

                    (f)
                    (f)
                    (g)
                    ) "1 2 1")
(test-equivalent '((deffun (make-counter count)
                     (deffun (counter)
                       (set! count (+ count 1))
                       count)
                     counter)
                   (defvar f (make-counter 0))
                   (defvar g (make-counter 0))

                   (f)
                   (f)
                   (g)
                   ))
(test-expect/smol '((deffun (make-counter count)
                      (lambda ()
                        (set! count (+ count 1))
                        count))
                    (defvar f (make-counter 0))
                    (defvar g (make-counter 0))

                    (f)
                    (f)
                    (g)
                    ) "1 2 1")
(test-equivalent '((deffun (make-counter count)
                     (lambda ()
                       (set! count (+ count 1))
                       count))
                   (defvar f (make-counter 0))
                   (defvar g (make-counter 0))

                   (f)
                   (f)
                   (g)
                   ))
(test-expect/smol '((deffun (f x)
                      (deffun (g y)
                        (+ x y))
                      g)
                    ((f 2) 1)
                    ) "3")
(test-equivalent '((deffun (f x)
                     (deffun (g y)
                       (+ x y))
                     g)
                   ((f 2) 1)
                   ))
(test-expect/smol '((deffun (f x)
                      (lambda (y) (+ x y)))
                    (defvar x 0)
                    ((f 2) 1)
                    ) "3")
(test-equivalent '((deffun (f x)
                     (lambda (y) (+ x y)))
                   (defvar x 0)
                   ((f 2) 1)
                   ))
(test-expect/smol '((defvar x 1)
                    (defvar f
                      (lambda (y)
                        (+ x y)))
                    (set! x 2)
                    (f x)
                    ) "4")
(test-equivalent '((defvar x 1)
                   (defvar f
                     (lambda (y)
                       (+ x y)))
                   (set! x 2)
                   (f x)
                   ))
(test-expect/smol '((deffun (make-getter)
                      (defvar x 1)
                      (deffun (get-x) x)
                      get-x)
                    (defvar x 2)
                    (defvar get-x (make-getter))
                    (get-x)
                    ) "1")
(test-equivalent '((deffun (make-getter)
                     (defvar x 1)
                     (deffun (get-x) x)
                     get-x)
                   (defvar x 2)
                   (defvar get-x (make-getter))
                   (get-x)
                   ))
(test-expect/smol '((deffun (make-getter x)
                      (deffun (get-x) x)
                      get-x)
                    (defvar get-a (make-getter 1))
                    (defvar get-b (make-getter 2))
                    (get-a)
                    (get-b)
                    ) "1 2")
(test-equivalent '((deffun (make-getter x)
                     (deffun (get-x) x)
                     get-x)
                   (defvar get-a (make-getter 1))
                   (defvar get-b (make-getter 2))
                   (get-a)
                   (get-b)
                   ))
(test-expect/smol '((deffun (f x) (+ x 1))
                    (deffun (new-f x) (* x x))
                    (set! f new-f)
                    (f 10)
                    ) "100")
(test-equivalent '((deffun (f x) (+ x 1))
                   (deffun (new-f x) (* x x))
                   (set! f new-f)
                   (f 10)
                   ))
(test-expect/smol '((defvar x 1)
                    (deffun (make-f)
                      (deffun (add-x y)
                        (+ x y))
                      add-x)
                    (defvar f (make-f))
                    (set! x 2)
                    (f x)
                    ) "4")
(test-equivalent '((defvar x 1)
                   (deffun (make-f)
                     (deffun (add-x y)
                       (+ x y))
                     add-x)
                   (defvar f (make-f))
                   (set! x 2)
                   (f x)
                   ))
(test-expect/smol '((deffun (twice f x)
                      (f (f x)))
                    (deffun (double x)
                      (+ x x))
                    (twice double 1)
                    ) "4")
(test-equivalent '((deffun (twice f x)
                     (f (f x)))
                   (deffun (double x)
                     (+ x x))
                   (twice double 1)
                   ))
(test-expect/smol '((deffun (add1 n)
                      (+ n 1))
                    (defvar v (mvec add1))
                    ((vref v 0) 2)
                    ) "3")
(test-equivalent '((deffun (add1 n)
                     (+ n 1))
                   (defvar v (mvec add1))
                   ((vref v 0) 2)
                   ))
(test-expect/smol '((deffun (build-dbl n)
                      (deffun (dbl)
                        (set! n (* n 2))
                        n)
                      dbl)
                    (defvar dbl1 (build-dbl 1))
                    (defvar dbl2 (build-dbl 1))

                    (dbl1)
                    (dbl2)
                    (dbl1)
                    ) "2 2 4")
(test-equivalent '((deffun (build-dbl n)
                     (deffun (dbl)
                       (set! n (* n 2))
                       n)
                     dbl)
                   (defvar dbl1 (build-dbl 1))
                   (defvar dbl2 (build-dbl 1))

                   (dbl1)
                   (dbl2)
                   (dbl1)
                   ))
(test-expect/smol '((deffun (build-dbl n)
                      (lambda ()
                        (set! n (* n 2))
                        n))
                    (defvar dbl1 (build-dbl 1))
                    (defvar dbl2 (build-dbl 1))

                    (dbl1)
                    (dbl2)
                    (dbl1)
                    ) "2 2 4")
(test-equivalent '((deffun (build-dbl n)
                     (lambda ()
                       (set! n (* n 2))
                       n))
                   (defvar dbl1 (build-dbl 1))
                   (defvar dbl2 (build-dbl 1))

                   (dbl1)
                   (dbl2)
                   (dbl1)
                   ))
(test-expect/smol '((deffun (f a)
                      (deffun (g b)
                        (+ a b))
                      g)
                    ((f 3) 2)
                    ) "5")
(test-equivalent '((deffun (f a)
                     (deffun (g b)
                       (+ a b))
                     g)
                   ((f 3) 2)
                   ))
(test-expect/smol '((deffun (f a)
                      (lambda (b) (+ a b)))

                    ((f 3) 2)
                    ) "5")
(test-equivalent '((deffun (f a)
                     (lambda (b) (+ a b)))

                   ((f 3) 2)
                   ))
(test-expect/smol '((defvar a 2)
                    (defvar fun
                      (lambda (b)
                        (+ a b)))
                    (set! a 3)
                    (fun a)
                    ) "6")
(test-equivalent '((defvar a 2)
                   (defvar fun
                     (lambda (b)
                       (+ a b)))
                   (set! a 3)
                   (fun a)
                   ))
(test-expect/smol '((deffun (fun)
                      (defvar it 100)
                      (deffun (what-is-it) it)
                      what-is-it)
                    (defvar it 1)
                    (defvar what-is-it (fun))
                    (what-is-it)
                    ) "100")
(test-equivalent '((deffun (fun)
                     (defvar it 100)
                     (deffun (what-is-it) it)
                     what-is-it)
                   (defvar it 1)
                   (defvar what-is-it (fun))
                   (what-is-it)
                   ))
(test-expect/smol '((deffun (fun A)
                      (deffun (what-is-A) A)
                      what-is-A)
                    (defvar what-is-A (fun 200))
                    (defvar what-is-B (fun 100))
                    (what-is-A)
                    (what-is-B)
                    ) "200 100")
(test-equivalent '((deffun (fun A)
                     (deffun (what-is-A) A)
                     what-is-A)
                   (defvar what-is-A (fun 200))
                   (defvar what-is-B (fun 100))
                   (what-is-A)
                   (what-is-B)
                   ))
(test-expect/smol '((deffun (twice n) (* n 2))
                    (deffun (square n) (* n n))
                    (set! twice square)
                    (twice 5)
                    ) "25")
(test-equivalent '((deffun (twice n) (* n 2))
                   (deffun (square n) (* n n))
                   (set! twice square)
                   (twice 5)
                   ))
(test-expect/smol '((defvar a 2)
                    (deffun (make-fun)
                      (deffun (add-a b)
                        (+ a b))
                      add-a)
                    (defvar fun (make-fun))
                    (set! a 100)
                    (fun a)
                    ) "200")
(test-equivalent '((defvar a 2)
                   (deffun (make-fun)
                     (deffun (add-a b)
                       (+ a b))
                     add-a)
                   (defvar fun (make-fun))
                   (set! a 100)
                   (fun a)
                   ))
(test-expect/smol '((deffun (ffx f x)
                      (f (f x)))
                    (deffun (add1 x)
                      (+ x 1))
                    (ffx add1 1)
                    ) "3")
(test-equivalent '((deffun (ffx f x)
                     (f (f x)))
                   (deffun (add1 x)
                     (+ x 1))
                   (ffx add1 1)
                   ))
(test-expect/smol '((deffun (add1 n)
                      (+ n 1))
                    (deffun (sub1 n)
                      (- n 1))
                    (defvar v (mpair add1 sub1))
                    ((right v) 2)
                    ) "1")
(test-equivalent '((deffun (add1 n)
                     (+ n 1))
                   (deffun (sub1 n)
                     (- n 1))
                   (defvar v (mpair add1 sub1))
                   ((right v) 2)
                   ))