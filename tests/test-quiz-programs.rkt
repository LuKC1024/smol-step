#lang racket
(require "./utilities.rkt")

(test-expect/smol '((deffun (f x x)
  (+ x x))
(f 1 2)
) "error")
(test-equivalent '((deffun (f x x)
  (+ x x))
(f 1 2)
))
(test-expect/smol '((defvar f 2)
(deffun (f x)
  (+ x 1))
f
) "error")
(test-equivalent '((defvar f 2)
(deffun (f x)
  (+ x 1))
f
))
(test-expect/smol '((defvar x 1)
(defvar x 2)
x
) "error")
(test-equivalent '((defvar x 1)
(defvar x 2)
x
))
(test-expect/smol '((deffun (addy x)
  (defvar y 2)
  (+ x y))
(defvar total (addy 3))
y
) "error")
(test-equivalent '((deffun (addy x)
  (defvar y 2)
  (+ x y))
(defvar total (addy 3))
y
))
(test-expect/smol '((defvar y 1)
(deffun (addy x)
  (defvar y 2)
  (+ x y))
(defvar total (addy 3))
y
) "1")
(test-equivalent '((defvar y 1)
(deffun (addy x)
  (defvar y 2)
  (+ x y))
(defvar total (addy 3))
y
))
(test-expect/smol '((deffun (addy x)
  (+ x y))
(defvar total (addy 1))
(defvar y 2)
total
) "error")
(test-equivalent '((deffun (addy x)
  (+ x y))
(defvar total (addy 1))
(defvar y 2)
total
))
(test-expect/smol '((defvar y (+ x 2))
(defvar x 1)
y
) "error")
(test-equivalent '((defvar y (+ x 2))
(defvar x 1)
y
))
(test-expect/smol '((defvar y 2)
(deffun (addy x)
  (+ x y))
(defvar total (addy 1))
total
) "3")
(test-equivalent '((defvar y 2)
(deffun (addy x)
  (+ x y))
(defvar total (addy 1))
total
))
(test-expect/smol '((deffun (addy x)
  (+ x y))
(defvar y 1)
(defvar total (addy 2))
total
) "3")
(test-equivalent '((deffun (addy x)
  (+ x y))
(defvar y 1)
(defvar total (addy 2))
total
))
(test-expect/smol '((deffun (addy x)
  (defvar y 1)
  (+ x y))
(addy 2)
) "3")
(test-equivalent '((deffun (addy x)
  (defvar y 1)
  (+ x y))
(addy 2)
))
(test-expect/smol '((defvar x 1)
(defvar y (+ x 2))
x
y
) "1 3")
(test-equivalent '((defvar x 1)
(defvar y (+ x 2))
x
y
))
(test-expect/smol '((defvar x 1)
(deffun (f x)
  (deffun (get-x) x)
  (get-x))
(f 2)
) "2")
(test-equivalent '((defvar x 1)
(deffun (f x)
  (deffun (get-x) x)
  (get-x))
(f 2)
))
(test-expect/smol '((defvar x 1)
(deffun (get-x) x)
(deffun (f x)
  (get-x))
(f 2)
) "1")
(test-equivalent '((defvar x 1)
(deffun (get-x) x)
(deffun (f x)
  (get-x))
(f 2)
))
(test-expect/smol '((defvar x 1)
(deffun (f x)
  (get-x))
(deffun (get-x) x)
(f 2)
) "1")
(test-equivalent '((defvar x 1)
(deffun (f x)
  (get-x))
(deffun (get-x) x)
(f 2)
))
(test-expect/smol '((defvar x 1)
(deffun (f)
  (deffun (get-x) x)
  (defvar x 2)
  (get-x))
(f)
) "2")
(test-equivalent '((defvar x 1)
(deffun (f)
  (deffun (get-x) x)
  (defvar x 2)
  (get-x))
(f)
))
(test-expect/smol '((deffun (prod n n)
  (* n n))
(prod 2 3)
) "error")
(test-equivalent '((deffun (prod n n)
  (* n n))
(prod 2 3)
))
(test-expect/smol '((defvar fun 2)
(deffun (fun arg)
  (* arg 2))
fun
) "error")
(test-equivalent '((defvar fun 2)
(deffun (fun arg)
  (* arg 2))
fun
))
(test-expect/smol '((defvar foobar 10)
(defvar foobar 99)
foobar
) "error")
(test-equivalent '((defvar foobar 10)
(defvar foobar 99)
foobar
))
(test-expect/smol '((deffun (multr s)
  (defvar r 3)
  (* s r))
(defvar one-twenty (multr 40))
r
) "error")
(test-equivalent '((deffun (multr s)
  (defvar r 3)
  (* s r))
(defvar one-twenty (multr 40))
r
))
(test-expect/smol '((defvar r 2)
(deffun (multr s)
  (defvar r 3)
  (* s r))
(defvar one-twenty (multr 40))
r
) "2")
(test-equivalent '((defvar r 2)
(deffun (multr s)
  (defvar r 3)
  (* s r))
(defvar one-twenty (multr 40))
r
))
(test-expect/smol '((deffun (multr s)
  (* s r))
(defvar multr-5 (multr 5))
(defvar r 3)
multr-5
) "error")
(test-equivalent '((deffun (multr s)
  (* s r))
(defvar multr-5 (multr 5))
(defvar r 3)
multr-5
))
(test-expect/smol '((defvar b (* 20 a))
(defvar a 10)
b
) "error")
(test-equivalent '((defvar b (* 20 a))
(defvar a 10)
b
))
(test-expect/smol '((defvar r 3)
(deffun (multr s)
  (* s r))
(devar o (multr 40))
o
) "120")
(test-equivalent '((defvar r 3)
(deffun (multr s)
  (* s r))
(devar o (multr 40))
o
))
(test-expect/smol '((deffun (multr s)
  (* s r))
(defvar r 3)
(defvar o (multr 40))
o
) "120")
(test-equivalent '((deffun (multr s)
  (* s r))
(defvar r 3)
(defvar o (multr 40))
o
))
(test-expect/smol '((deffun (multr s)
  (defvar r 3)
  (* s r))
(multr 40)
) "120")
(test-equivalent '((deffun (multr s)
  (defvar r 3)
  (* s r))
(multr 40)
))
(test-expect/smol '((defvar a 10)
(defvar b (* 20 a))
a
b
) "10 200")
(test-equivalent '((defvar a 10)
(defvar b (* 20 a))
a
b
))
(test-expect/smol '((defvar it 100)
(deffun (fun it)
  (deffun (what-is-it) it)
  (what-is-it))
(fun 1)
) "1")
(test-equivalent '((defvar it 100)
(deffun (fun it)
  (deffun (what-is-it) it)
  (what-is-it))
(fun 1)
))
(test-expect/smol '((defvar it 100)
(deffun (what-is-it) it)
(deffun (fun it)
  (what-is-it))
(fun 1)
) "1")
(test-equivalent '((defvar it 100)
(deffun (what-is-it) it)
(deffun (fun it)
  (what-is-it))
(fun 1)
))
(test-expect/smol '((defvar it 100)
(deffun (fun it)
  (what-is-it))
(deffun (what-is-it) it)
(fun 1)
) "1")
(test-equivalent '((defvar it 100)
(deffun (fun it)
  (what-is-it))
(deffun (what-is-it) it)
(fun 1)
))
(test-expect/smol '((defvar it 100)
(deffun (fun)
  (deffun (what-is-it) it)
  (defvar it 1)
  (what-is-it))
(fun)
) "1")
(test-equivalent '((defvar it 100)
(deffun (fun)
  (deffun (what-is-it) it)
  (defvar it 1)
  (what-is-it))
(fun)
))








;;; mut-vars

(test-expect/smol '((defvar x 12)
(deffun (setx0 x)
  (set! x 0))
(setx0 x)
x
) "12")
(test-equivalent '((defvar x 12)
(deffun (setx0 x)
  (set! x 0))
(setx0 x)
x
))
(test-expect/smol '((defvar x 100)
(begin
  (begin
    1
    (set! x (+ x 1))
    2)
  x)
) "101")
(test-equivalent '((defvar x 100)
(begin
  (begin
    1
    (set! x (+ x 1))
    2)
  x)
))
(test-expect/smol '((defvar x 0)
x
(begin
  (set! x 1)
  x)
x
) "0 1 1")
(test-equivalent '((defvar x 0)
x
(begin
  (set! x 1)
  x)
x
))
(test-expect/smol '((defvar x 1)
(deffun (getx)
  x)
(deffun (setx new-val)
  (set! x new-val))
(getx)
(setx 2)
(getx)
) "1 2")
(test-equivalent '((defvar x 1)
(deffun (getx)
  x)
(deffun (setx new-val)
  (set! x new-val))
(getx)
(setx 2)
(getx)
))
(test-expect/smol '((defvar x 12)
(deffun (setx0)
  (set! x 0))
(setx0)
x
) "0")
(test-equivalent '((defvar x 12)
(deffun (setx0)
  (set! x 0))
(setx0)
x
))
(test-expect/smol '((defvar x 12)
(defvar y x)
(set! y 0)
x
y
) "12 0")
(test-equivalent '((defvar x 12)
(defvar y x)
(set! y 0)
x
y
))
(test-expect/smol '((defvar x 12)
(deffun (set-and-return y)
  (set! y 0)
  x)
(set-and-return x)
) "12")
(test-equivalent '((defvar x 12)
(deffun (set-and-return y)
  (set! y 0)
  x)
(set-and-return x)
))
(test-expect/smol '((defvar x 12)
(defvar y x)
(set! x 0)
x
y
) "0 12")
(test-equivalent '((defvar x 12)
(defvar y x)
(set! x 0)
x
y
))
(test-expect/smol '((defvar x 12)
(deffun (set-and-return y)
  (set! x 0)
  y)
(set-and-return x)
) "12")
(test-equivalent '((defvar x 12)
(deffun (set-and-return y)
  (set! x 0)
  y)
(set-and-return x)
))
(test-expect/smol '((defvar var 1)
(deffun (update-var var)
  (set! var 2))
(update-var var)
var
) "1")
(test-equivalent '((defvar var 1)
(deffun (update-var var)
  (set! var 2))
(update-var var)
var
))
(test-expect/smol '((defvar foo 0)
(begin
  (begin
    2
    (set! foo (+ foo 1))
    3)
  foo)
) "1")
(test-equivalent '((defvar foo 0)
(begin
  (begin
    2
    (set! foo (+ foo 1))
    3)
  foo)
))
(test-expect/smol '((defvar foo 99)
foo
(begin
  (set! foo 100)
  foo)
foo
) "99 100 100")
(test-equivalent '((defvar foo 99)
foo
(begin
  (set! foo 100)
  foo)
foo
))
(test-expect/smol '((defvar tmp 4)
(deffun (lookup)
  tmp)
(deffun (update val)
  (set! tmp val))
(lookup)
(update 3)
(lookup)
) "4 3")
(test-equivalent '((defvar tmp 4)
(deffun (lookup)
  tmp)
(deffun (update val)
  (set! tmp val))
(lookup)
(update 3)
(lookup)
))
(test-expect/smol '((defvar var 1)
(deffun (update-var)
  (set! var 2))
(update-var)
var
) "2")
(test-equivalent '((defvar var 1)
(deffun (update-var)
  (set! var 2))
(update-var)
var
))
(test-expect/smol '((defvar var1 1)
(defvar var2 var1)
(set! var2 2)
var1
var2
) "1 2")
(test-equivalent '((defvar var1 1)
(defvar var2 var1)
(set! var2 2)
var1
var2
))
(test-expect/smol '((defvar var1 1)
(deffun (update-var var2)
  (set! var2 2)
  var1)
(update-var var1)
) "1")
(test-equivalent '((defvar var1 1)
(deffun (update-var var2)
  (set! var2 2)
  var1)
(update-var var1)
))
(test-expect/smol '((defvar var1 1)
(defvar var2 var1)
(set! var1 2)
var1
var2
) "2 1")
(test-equivalent '((defvar var1 1)
(defvar var2 var1)
(set! var1 2)
var1
var2
))
(test-expect/smol '((defvar var1 1)
(deffun (update-var var2)
  (set! var1 2)
  var2)
(update-var var1)
) "1")
(test-equivalent '((defvar var1 1)
(deffun (update-var var2)
  (set! var1 2)
  var2)
(update-var var1)
))



;; vectors

(test-expect/smol '((defvar v (mvec 1 2 3))
(defvar vv (mpair v v))
(vset! (right vv) 0 100)
(left vv)
) "#(100 2 3)")
(test-equivalent '((defvar v (mvec 1 2 3))
(defvar vv (mpair v v))
(vset! (right vv) 0 100)
(left vv)
))
(test-expect/smol '((defvar x 3)
(defvar v (mvec 1 2 x))
(set! x 4)
v
) "#(1 2 3)")
(test-equivalent '((defvar x 3)
(defvar v (mvec 1 2 x))
(set! x 4)
v
))
(test-expect/smol '((defvar x (mvec 1 0))
(defvar y x)
(vset! x 0 173)
y
) "#(173 0)")
(test-equivalent '((defvar x (mvec 1 0))
(defvar y x)
(vset! x 0 173)
y
))
(test-expect/smol '((defvar x (mvec 1 0))
(deffun (f y)
  (vset! y 0 173))
(f x)
x
) "#(173 0)")
(test-equivalent '((defvar x (mvec 1 0))
(deffun (f y)
  (vset! y 0 173))
(f x)
x
))
(test-expect/smol '((defvar v (mpair 2 3))
(set-left! v v)
(right (left (left (left (left v)))))
) "3")
(test-equivalent '((defvar v (mpair 2 3))
(set-left! v v)
(right (left (left (left (left v)))))
))
(test-expect/smol '((mvec (mvec 1 2) 3)
) "#(#(1 2) 3)")
(test-equivalent '((mvec (mvec 1 2) 3)
))
(test-expect/smol '((defvar mv (mvec 100))
(defvar mv2 (mpair mv mv))
(vset! (left mv2) 0 42)
(right mv2)
) "#(42)")
(test-equivalent '((defvar mv (mvec 100))
(defvar mv2 (mpair mv mv))
(vset! (left mv2) 0 42)
(right mv2)
))
(test-expect/smol '((defvar var 0)
(defvar vec (mvec 2 var 3))
(set! var 1)
vec
) "#(2 0 3)")
(test-equivalent '((defvar var 0)
(defvar vec (mvec 2 var 3))
(set! var 1)
vec
))
(test-expect/smol '((defvar var1 (mvec 100 200))
(defvar var2 var1)
(vset! var1 1 17)
var2
) "#(100 17)")
(test-equivalent '((defvar var1 (mvec 100 200))
(defvar var2 var1)
(vset! var1 1 17)
var2
))
(test-expect/smol '((defvar var1 (mvec 100 17))
(deffun (update-var var2)
  (vset! var2 0 200))
(update-var var1)
var1
) "#(200 17)")
(test-equivalent '((defvar var1 (mvec 100 17))
(deffun (update-var var2)
  (vset! var2 0 200))
(update-var var1)
var1
))
(test-expect/smol '((defvar x (mpair 0 12))
(set-right! x x)
(left (right (right (right (right x)))))
) "0")
(test-equivalent '((defvar x (mpair 0 12))
(set-right! x x)
(left (right (right (right (right x)))))
))
(test-expect/smol '((mvec 1 (mvec 2 3) (mvec))
) "#(1 #(2 3) #())")
(test-equivalent '((mvec 1 (mvec 2 3) (mvec))
))


;; hof

(test-expect/smol '((deffun (make-counter count)
  (deffun (counter)
    (set! count (+ count 1))
    count)
  counter)
(defvar f (make-counter 0))
(defvar g (make-counter 0))

(f)
(f)
(g)
) "1 2 1")
(test-equivalent '((deffun (make-counter count)
  (deffun (counter)
    (set! count (+ count 1))
    count)
  counter)
(defvar f (make-counter 0))
(defvar g (make-counter 0))

(f)
(f)
(g)
))
(test-expect/smol '((deffun (make-counter count)
  (lambda ()
    (set! count (+ count 1))
    count))
(defvar f (make-counter 0))
(defvar g (make-counter 0))

(f)
(f)
(g)
) "1 2 1")
(test-equivalent '((deffun (make-counter count)
  (lambda ()
    (set! count (+ count 1))
    count))
(defvar f (make-counter 0))
(defvar g (make-counter 0))

(f)
(f)
(g)
))
(test-expect/smol '((deffun (f x)
  (deffun (g y)
    (+ x y))
  g)
((f 2) 1)
) "3")
(test-equivalent '((deffun (f x)
  (deffun (g y)
    (+ x y))
  g)
((f 2) 1)
))
(test-expect/smol '((deffun (f x)
  (lambda (y) (+ x y)))
(defvar x 0)
((f 2) 1)
) "3")
(test-equivalent '((deffun (f x)
  (lambda (y) (+ x y)))
(defvar x 0)
((f 2) 1)
))
(test-expect/smol '((deffun (f x) (+ x 1))
) "(defvar f (lambda (x) (+ x 1)))
")
(test-equivalent '((deffun (f x) (+ x 1))
))
(test-expect/smol '((defvar x 1)
(defvar f
  (lambda (y)
    (+ x y)))
(set! x 2)
(f x)
) "4")
(test-equivalent '((defvar x 1)
(defvar f
  (lambda (y)
    (+ x y)))
(set! x 2)
(f x)
))
(test-expect/smol '((deffun (make-getter)
  (defvar x 1)
  (deffun (get-x) x)
  get-x)
(defvar x 2)
(defvar get-x (make-getter))
(get-x)
) "1")
(test-equivalent '((deffun (make-getter)
  (defvar x 1)
  (deffun (get-x) x)
  get-x)
(defvar x 2)
(defvar get-x (make-getter))
(get-x)
))
(test-expect/smol '((deffun (make-getter x)
  (deffun (get-x) x)
  get-x)
(defvar get-a (make-getter 1))
(defvar get-b (make-getter 2))
(get-a)
(get-b)
) "1 2")
(test-equivalent '((deffun (make-getter x)
  (deffun (get-x) x)
  get-x)
(defvar get-a (make-getter 1))
(defvar get-b (make-getter 2))
(get-a)
(get-b)
))
(test-expect/smol '((deffun (f x) (+ x 1))
(deffun (new-f x) (* x x))
(set! f new-f)
(f 10)
) "100")
(test-equivalent '((deffun (f x) (+ x 1))
(deffun (new-f x) (* x x))
(set! f new-f)
(f 10)
))
(test-expect/smol '((defvar x 1)
(deffun (make-f)
  (deffun (add-x y)
    (+ x y))
  add-x)
(defvar f (make-f))
(set! x 2)
(f x)
) "4")
(test-equivalent '((defvar x 1)
(deffun (make-f)
  (deffun (add-x y)
    (+ x y))
  add-x)
(defvar f (make-f))
(set! x 2)
(f x)
))
(test-expect/smol '((deffun (twice f x)
  (f (f x)))
(deffun (double x)
  (+ x x))
(twice double 1)
) "4")
(test-equivalent '((deffun (twice f x)
  (f (f x)))
(deffun (double x)
  (+ x x))
(twice double 1)
))
(test-expect/smol '((deffun (make-addy y)
  (deffun (addy x)
    (+ x y))
  addy)
((make-addy 2) 3)
) "5")
(test-equivalent '((deffun (make-addy y)
  (deffun (addy x)
    (+ x y))
  addy)
((make-addy 2) 3)
))
(test-expect/smol '((deffun (add1 n)
  (+ n 1))
(defvar v (mvec add1))
((vref v 0) 2)
) "3")
(test-equivalent '((deffun (add1 n)
  (+ n 1))
(defvar v (mvec add1))
((vref v 0) 2)
))
(test-expect/smol '((deffun (build-dbl n)
  (deffun (dbl)
    (set! n (* n 2))
    n)
  dbl)
(defvar dbl1 (build-dbl 1))
(defvar dbl2 (build-dbl 1))

(dbl1)
(dbl2)
(dbl1)
) "2 2 4")
(test-equivalent '((deffun (build-dbl n)
  (deffun (dbl)
    (set! n (* n 2))
    n)
  dbl)
(defvar dbl1 (build-dbl 1))
(defvar dbl2 (build-dbl 1))

(dbl1)
(dbl2)
(dbl1)
))
(test-expect/smol '((deffun (build-dbl n)
  (lambda ()
    (set! n (* n 2))
    n))
(defvar dbl1 (build-dbl 1))
(defvar dbl2 (build-dbl 1))

(dbl1)
(dbl2)
(dbl1)
) "2 2 4")
(test-equivalent '((deffun (build-dbl n)
  (lambda ()
    (set! n (* n 2))
    n))
(defvar dbl1 (build-dbl 1))
(defvar dbl2 (build-dbl 1))

(dbl1)
(dbl2)
(dbl1)
))
(test-expect/smol '((deffun (f a)
  (deffun (g b)
    (+ a b))
  g)
((f 3) 2)
) "5")
(test-equivalent '((deffun (f a)
  (deffun (g b)
    (+ a b))
  g)
((f 3) 2)
))
(test-expect/smol '((deffun (f a)
  (lambda (b) (+ a b)))

((f 3) 2)
) "5")
(test-equivalent '((deffun (f a)
  (lambda (b) (+ a b)))

((f 3) 2)
))
(test-expect/smol '((defvar a 2)
(defvar fun
  (lambda (b)
    (+ a b)))
(set! a 3)
(fun a)
) "6")
(test-equivalent '((defvar a 2)
(defvar fun
  (lambda (b)
    (+ a b)))
(set! a 3)
(fun a)
))
(test-expect/smol '((deffun (fun)
  (defvar it 100)
  (deffun (what-is-it) it)
  what-is-it)
(defvar it 1)
(defvar what-is-it (fun))
(what-is-it)
) "100")
(test-equivalent '((deffun (fun)
  (defvar it 100)
  (deffun (what-is-it) it)
  what-is-it)
(defvar it 1)
(defvar what-is-it (fun))
(what-is-it)
))
(test-expect/smol '((deffun (fun A)
  (deffun (what-is-A) A)
  what-is-A)
(defvar what-is-A (fun 200))
(defvar what-is-B (fun 100))
(what-is-A)
(what-is-B)
) "200 100")
(test-equivalent '((deffun (fun A)
  (deffun (what-is-A) A)
  what-is-A)
(defvar what-is-A (fun 200))
(defvar what-is-B (fun 100))
(what-is-A)
(what-is-B)
))
(test-expect/smol '((deffun (twice n) (* n 2))
(deffun (square n) (* n n))
(set! twice square)
(twice 5)
) "25")
(test-equivalent '((deffun (twice n) (* n 2))
(deffun (square n) (* n n))
(set! twice square)
(twice 5)
))
(test-expect/smol '((defvar a 2)
(deffun (make-fun)
  (deffun (add-a b)
    (+ a b))
  add-a)
(defvar fun (make-fun))
(set! a 100)
(fun a)
) "200")
(test-equivalent '((defvar a 2)
(deffun (make-fun)
  (deffun (add-a b)
    (+ a b))
  add-a)
(defvar fun (make-fun))
(set! a 100)
(fun a)
))
(test-expect/smol '((deffun (ffx f x)
  (f (f x)))
(deffun (add1 x)
  (+ x 1))
(ffx add1 1)
) "3")
(test-equivalent '((deffun (ffx f x)
  (f (f x)))
(deffun (add1 x)
  (+ x 1))
(ffx add1 1)
))
(test-expect/smol '((deffun (mult a)
  (deffun (multa b)
    (* a b))
  multa)
((mult 2) 3)
) "6")
(test-equivalent '((deffun (mult a)
  (deffun (multa b)
    (* a b))
  multa)
((mult 2) 3)
))
(test-expect/smol '((deffun (add1 n)
  (+ n 1))
(deffun (sub1 n)
  (- n 1))
(defvar v (mpair add1 sub1))
((right v) 2)
) "1")
(test-equivalent '((deffun (add1 n)
  (+ n 1))
(deffun (sub1 n)
  (- n 1))
(defvar v (mpair add1 sub1))
((right v) 2)
))


;; local

(test-expect/smol '((let ([x 2]
      [x 3])
  (+ x x))
) "error")
(test-equivalent '((let ([x 2]
      [x 3])
  (+ x x))
))
(test-expect/smol '((letrec ([x 1]
         [x 2])
  x)
) "error")
(test-equivalent '((letrec ([x 1]
         [x 2])
  x)
))
(test-expect/smol '((defvar x 1)
(let ([x 2])
  x)
x
) "2 1")
(test-equivalent '((defvar x 1)
(let ([x 2])
  x)
x
))
(test-expect/smol '((defvar x 1)
(letrec ([x 2])
  x)
x
) "2 1")
(test-equivalent '((defvar x 1)
(letrec ([x 2])
  x)
x
))
(test-expect/smol '((let ([x 2]
      [y (+ x 1)])
   (+ x y))
) "error")
(test-equivalent '((let ([x 2]
      [y (+ x 1)])
   (+ x y))
))
(test-expect/smol '((letrec ([x 2]
         [y (+ x 1)])
   (+ x y))
) "5")
(test-equivalent '((letrec ([x 2]
         [y (+ x 1)])
   (+ x y))
))
(test-expect/smol '((let ([x 2]
      [y 3])
  (let ([x y]
        [y x])
    (pair x y)))
) "'#(3 2)")
(test-equivalent '((let ([x 2]
      [y 3])
  (let ([x y]
        [y x])
    (pair x y)))
))
(test-expect/smol '((letrec ([x 2]
         [y 3])
  (letrec ([x y]
           [y x])
    (pair x y)))
) "error")
(test-equivalent '((letrec ([x 2]
         [y 3])
  (letrec ([x y]
           [y x])
    (pair x y)))
))
(test-expect/smol '((let ([foobar 10]
      [foobar 99])
  foobar)
) "error")
(test-equivalent '((let ([foobar 10]
      [foobar 99])
  foobar)
))
(test-expect/smol '((letrec ([foobar 10]
         [foobar 99])
  foobar)
) "error")
(test-equivalent '((letrec ([foobar 10]
         [foobar 99])
  foobar)
))
(test-expect/smol '((defvar foobar 10)
(let ([foobar 99])
  foobar)
foobar
) "99 10")
(test-equivalent '((defvar foobar 10)
(let ([foobar 99])
  foobar)
foobar
))
(test-expect/smol '((defvar foobar 10)
(letrec ([foobar 99])
  foobar)
foobar
) "99 10")
(test-equivalent '((defvar foobar 10)
(letrec ([foobar 99])
  foobar)
foobar
))
(test-expect/smol '((let ([a 2]
      [b (* a 3)])
   (+ a b))
) "8")
(test-equivalent '((let ([a 2]
      [b (* a 3)])
   (+ a b))
))
(test-expect/smol '((letrec ([a 2]
         [b (* a 3)])
   (+ a b))
) "8")
(test-equivalent '((letrec ([a 2]
         [b (* a 3)])
   (+ a b))
))
(test-expect/smol '((let ([a 1]
      [b 100])
  (let ([a b]
        [b a])
    (mvec a b)))
) "'#(100 1)")
(test-equivalent '((let ([a 1]
      [b 100])
  (let ([a b]
        [b a])
    (mvec a b)))
))
(test-expect/smol '((letrec ([a 1]
         [b 100])
  (letrec ([a b]
           [b a])
    (mvec a b)))
) "'#(100 1)")
(test-equivalent '((letrec ([a 1]
         [b 100])
  (letrec ([a b]
           [b a])
    (mvec a b)))
))
